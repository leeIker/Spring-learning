springmvc 的映射类我学的是使用
           注解的方式配置如容器的
		   
		   注解有：
					controller
					RequestMapping
					
					
					controller表示此类是映射关系类
					RequestMapping则归类具体的映射关系
					
					
		import org.springframework.stereotype.Controller;

import org.springframework.web.bind.annotation.RequestMapping;

@Controller
public class SpringmvcHandler {
    @RequestMapping("wellcome") 
	public String wellcome() {
		return "success";
	}  
	这个是我自己写的例子，  这个wellcome方法表示  拦截“wellcome”的请求
	并且请求转发的success   为中间部分，结合视图解析器的前缀和后缀组合成的文件中
	
	  其中以上例子中，可以在中也加入RequestMapping注解，这样就是在请求中先找
	  类中的注解值，在找方法中的注解值。
	  
	  
	  另外注解的值和类的、方法的名是可以不一致的。
	  
	  
	  
	  RequestMapping中还有很值属性和值其中上面所用的是value，也就是不写的默认是value
	  
	  还有method表示请求的方法       使用RequstMethod.POST这样的类型去赋值
			小词条：请求方式中，如果没有手工改，默认是get方式
			
			其修改方式是： @RequestMapping(value="wellcome", method=RequestMethod.POST) 
	public String wellcome() {
		return "success";
		
			这样求情只有是post的时候才能被映射关系接受
			
				四种请求方式分别是  get  put delete  post
				
				
				
		RequestMapping中的另一个参数是param   其中设置在请求中必须有参数
		例子是  @RequestMapping(value="wellcome", method=RequestMethod.POST,params= {"name"} )
		这样在请求中 提交的数据中，必须有一个参数是name
		
		如果在name=value值的话，则只有在name值等于value的情况下，才会拦截该请求
		还可以加！=号，用来表示该属性不能等于某个特定的值   这个不等于的情况是没有这个属性也是可以的，但是如果有，则必须不等于
		举例子
		 @RequestMapping(value="wellcome", method=RequestMethod.POST,params= {"name=zs","age!=23"} )
		 表示名为age的属性不能为23，或者根本没有age属性
		
		参数还有最后一种情况  是表示任何参数的值不能是这个值得情况   其情况为”！something“
		举例子是：
		 @RequestMapping(value="wellcome", method=RequestMethod.POST,params= {"name=zs","age!=23","!lihe"} )
		 在请求当中不能有 lihe这个字符串
		 
		 
		 ant风格的请求方式 利用通配符进行筛选
		 ?表示单个字符
		 *表示任意个（包括0个）字符
		 **表示任意目录
		 
		其中需要讲解的是**任意目录      因为目录需要使用//扩起来   是/**/这样的形式
		
		
		通过	PathVariable注解获取参数
		例子是
		@RequestMapping(value="wellcome2/{name}" )
   	public String wellcome2(@PathVariable("name") String name) {
    		System.out.println(name);
   		return "success";
   	}
		
		前段的请求为<a href="wellcome2/name"
		
		请求中的那么 配提交到 RequestMapping中的name中
		然后PathVariable 注解拿到，并赋值飞自己修饰的字符串name
		然后可以在类中使用这个值
		
		
		REST软件编程风格
		springmvc中
		get  ：查询
		delete：删除
		post 增加
		put：改
		
普通浏览器只支持post get两种请求方式
所以需要配置拦截器   增加请求方式

过滤器的名字是HidenHttpMethodFilter\
其配置方式是在web。xml中配置
 <filter>
  	<filter-name>HiddenHttpMethodFilter</filter-name>
  	<filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>
  </filter>
  <filter-mapping>
  	<filter-name>HiddenHttpMethodFilter</filter-name>
  	<url-pattern>/*</url-pattern>
  </filter-mapping>
  
  是spring给写好的过滤器
  其隐藏的属性我<input  type="hidden"  name="method"  value="delete/put"
   只要一个请求满足以上条件，就会被过滤器拦截         根据value的值修改请求方式  delete改成delete请求    put改成put请求  
		
		
		
springmvc对客户端输入信息的拿去方式处理上面的方式外，还有一种
方式:利用ReqeustParam（）注解拿到，
参数为客户端kv对的k  然后将v赋值给注解修饰的变量（通常是在形参中）
例子是： @RequestMapping(value="wellcome4" )
   	public String wellcome4(@RequestParam("name") String name) {
    		System.out.println(name);
   		return "success";
		
		RequestParam注解还有其他的参数其中上述例子中的name其实是value=“name”
		只不过在一个参数时默认是这样
		这个注解还有其他的参数  比如required参数  默认为ture表示这个参数必须穿值，可以手动改成
		false 改值以后可以不用传值
		还有defaultValue参数，其值为当前段没有传来参数的时候默认的值。
		
	如果传来多个参数，需要用多个ReqeustParam注解来接收
   	}
	
	还有一个注解是RequestHeader用来拿请求的头信息的
	其方式和上面的RequestParam是一样的，都在参数中，将值赋值给所修饰参数
	
	如果要拿cookie，需要使用cookieValue注释拿，操作和以上注释一样
	
	
springmvc还可以使用对象拿参数
方式是在前段的输入参数的name和对象的属性完完全全一致
这种映射支持级联映射，级联对象的属性通过对象名.属性的方式加name
其方式为
   控制器内容
 @RequestMapping(value="wellcome5")
   	public String wellcome5( Student student) {
    		System.out.println(student.getId()+","+student.getName()+","+student.getAge());
   		return "success";
	
前端内容	
	<form action="something/wellcome5">
		id:<input name="id">
		name:<input name="name">
		<br>----
		age:<input name="age">
		<br>-----
		<input type="submit" value="input">
	
	</form>
	
student类的属性：private int id;
	private String name;
	private int age;
	
	
	
	
springmvc也可以用原始的servlet来开发
使用方式是在在映射方法的参数中直接声明原始servlet的request和response，然后可以直接
在映射方法中使用
比如  public String ServletTest（HttpServletRequest  request，HttpServletResponse response）{
	在方法体内可以任意调用request和response两个对象，和原始servlet是一样的。

}	
	
		