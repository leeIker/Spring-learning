spring ioc控制反转或者叫di依赖注入

控制反转的底层技术是利用反射技术调用bean的无参数构造，所以
每个bean必须有一个午餐构造
如果本身没有构造函数，则默认会有一个
如果自己创建一个有参数构造，则之前的默认无参数构造会消失
需要自己手动创建一个午餐构造

头文件为
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">
		
</beans>
依赖注入式在xml中，application.xml中注入类与类，以及类与成员变量（可以即简单类型，也可以是引用类型）的关系
在bean中注入成员变量的值

ioc的作用为 1将bean放入超级工厂中，使用方便  
			2将bean的成员变量进行配置
首先需要建立相应的类
在application.xml中设置相应bean标签
标签属性为id 和class
举例子为
<bean id="唯一标识符" class=“类的路径”>
	其中字标签有property标签 有属性id 和value
	<property id="类的成员属性" value=“成员属性的值”/>这是简单类型
	<property id="类的成员属性" ref=“bean的id值”/>这是引用类型
<bean>
比如<property name="courseName" value="史学导论"></property>
        	<property name="courseHours" value="10"></property>
        	<property name="teacher" ref="teacher"></property>  
此种方式是通过setter 和getter注入

然后再主类中使用ClassPathXmlApplicationContext类的构造函数ClassPathXmlApplicationContext（“application.xml”）将配置信息、
导入容器
然后使用ClassPathXmlApplicationContext.getBean("beande id值")获取bean的引用

使用properties标签还可以不用属性value
转而增加字标签value然后再value标签中注入
这种好处就在于不用加“”号，如果加会在内容中加入“”好
另外还可以在value标签中加入type属性，给value值赋值
如果使用value属性，则在使用到xml预定义符号如<时，只能使用转义字符或者叫实体引用
如果是使用value字标签则可以使用<![CDATA[输入内容]]> 此标签能够将所有内容原样输出
以上关于value的内容都适用于constructor注入

除了用setter和getter方法还可以用构造器
用法为在bean中加入字标签constructor-arg   标签属性为value 对应在constructor中的位置的值是一致的
如果不一样如果顺序不一致，可以用index属性制定  下面例子中index=‘0’的意思是此value值对应constructor的第一个值
最后还可以在constructor中加入name属性，用来表示对应的value的索引 或者加入type属性，用来制定value的类型值
当constructor中参数值不一致可以使用
一般建议使用name 和value两个属性来填充constructor标签
比如
<constructor-arg value="史学导论" index=“0”></constructor-arg>
        	<constructor-arg value="12"></constructor-arg>
 			<constructor-arg ref="teacher"></constructor-arg>
同时这种方式需要constructor 你传入不同的参数的个数，回个据此调用不同的constructor
会有这样一种情况，有两个构造器，分别传入两个参数，一个字符串，一个数字
犹豫在构造器注入中，所输入数值都是用引号括起来，所以分不清，这种情况下，系统会默认调用String的
构造器，如果想要调用数字的构造器，需要引入type或者name属性
注意在spring注入过程中，无论其注入的值是数值，还是spring其方式都是引号内加字符串，这样造成的结果是注入字符串和数值可能混淆
所以在使用构造器注入式，如果出现这种情况，血药加type或者name属性


最后一种通过p命名空间注入
声明为xmlns:p="http://www.springframework.org/schema/p"
其方法为直接在bean标签中添加属性 p：简单类型名字=‘’  复杂类型为p:名字-ref=‘’
比如<bean id="course" class="huijingyuan.Course" p:courseName="shixue daolun" p:courseHours="10" p:teacher-ref="teacher">
    </bean> 
	
	在配置文件中，注入null值得标签为</null>如果直接写null则会输出字符串“null”
	其方式为直接在property中增加子标签</null>
	比如<property id="">
			</null>
		</property>
	
	注入空字符串
	如果是使用value标签赋值为空字符串，则是直接什么都不写即<value></value> 这样注入空字符串
	如果是value属性也是啥也不写  value=“”即可
      如
		<property id="">
			<value></value>
		</property>
		
		<property id="" value="">
	
注入特殊类型的数据
集合类型
private List<String> list;
	private String[] array;
	private Set<String> set;
	private  Map<String,String> map;
	private Properties property;
	
	骑在配置文件的配置方式为
	
        
        <bean id='collection' class='huijingyuan.AllCollection'>
        	<property name="list">
        		<list>
        		<value>football</value>
        		<value>basketball</value>
        		</list>    		
        	</property>
        	
        	<property name="array">
        		<array>
        			<value>lihe</value>
        			<value>a girl</value>
        		</array>
        	</property>
        	<property name="set">
        		<set>
        		 	<value>suiyu</value>
        			<value>noname</value>
        		</set>
        	</property>
        	<property name="map">
        		<map>
        			<entry>
        			 	<key>
        			 		<value>leehe </value>
        			 	</key>
        			 	<value>suiyu</value>
        			</entry>
        		</map>
        	</property>
        	<property name="property">
        		<props>
        			<prop key="zhangduchao">dingyuan_and_shuilaizhe</prop>
        		</props>
        	</property>
        </bean>
		
		这其中List、set、array可以混着用，都用List标签
		
		
自动装配
自动装配只适用于引用类型（ref）
在bean标签中田间autowire属性属性值为自动装配的方式
其属性值有byName
这种方式其实是byId   bean的属性名与另一个bean的id值是一样的时候
两者自动配对，完成注入


	



