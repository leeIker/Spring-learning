面向切面
依赖注入能够把对象内容配置给其他对象

面向对象能够把方法内容配置给其他对象

面向切面的几个概念
切入点，确切的说是某个类的某个方法，以这个方法作为切入点，切入切入面
切入面，需要进行切入的方法，也是某一个方法
通知，切面加上切入的时机，即是所谓的通知
  通知类型;前置通知，后置通知，环绕通知，异常通知
  

一个类编程特定功能的类的方法
继承类  实现借口  通过注解  配置

aspect的通知
前置通知 ，后置通知 ，异常通知 ，环绕通知

前置通知步骤

需要导包 aopaliance.jar
		aspectjweaver.jar
		
编写代码 aop在执行add（）《此方法叫业务方法》之前自动执行的方法log（）《此方法叫aop方法》

创建一个普通类，在类型中设置前置方法addPerson（） 这个类是为了增加业务方法
创建前置类实现methodBeforeAdvice接口  然后咋I实现类中实现before（）方法  before方法
比如public class AopClass implements MethodBeforeAdvice{

	@Override
	public void before(Method method, Object[] args, Object target) throws Throwable {
		// TODO Auto-generated method stub
			System.out.print("this is a aop前置通知");
	}
	在before方法中 object target引用到拥有业务方法的类
				   Method method即是业务方法的引用
				   Boject[]args 是业务方法的参数

创建后置类实现AfterRetruningAdice接口   然后实现afterReurning()方法
就是aop前置通知方法。
并且实现其中的before方法

然后将两个类配置到spring容器中

applacation头文件 声明
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

  <bean id="addClass" class="huijingyuan.AddClass">
        </bean>
        <!-- aop方法 -->
        <bean id="AopClass" class="huijingyuan.AopClass">
        </bean>
        
        <aop:config>
        <!-- 配置切入点 -->
        <aop:pointcut expression="execution(public void huijingyuan.AddClass.add())" id="piontCut"/>
        <aop:advisor advice-ref="AopClass" pointcut-ref="piontCut"/>酱切入点连接切入面
        
        </aop:config>
		在做以上的时候出现两处错误，导致多耗费了40分钟，第一是execution拼写错误，少一个i
		还有一个在execution中，设置配置方法的时候要将java这个字符串去掉，如果加上就不能识别。
		2019.9.25日更新
		
		
		2019.9.26日更新

		2019.9.27更新
		异常通知类继承的类型为ThrowsAdvice
		但是借口并没有抽象方法，但是有实现方法的格式。
		格式为
		 public void afterThrowing([Method, args, target], ThrowableSubclass  （其中method导包为反射包，args是参数 target是业务
		方法的类，throwalbe为异常类型    中括号表示，前三个三叔必须一起导入）
		或者是public void afterThrowing(), ThrowableSubclass
			一种有参数，一种没有参数
			
			这个时候如果在调用切入点业务方法是，如果这个方法发生异常，这回调用这个异常通知方法

		